Structure was a fun topic to learn for this week; I think structures have the potential to be used in various ways and can help me to shorten the process of coding and reduce the unessential typing. It is way more fun when structures and arrays come together and create array structures. It wasn't that hard to learn it; maybe just the part where brackets went under other brackets when initializing the array structure got a little tricky for me.
Using parallel arrays instead of array structures requires more lines and coding; we can cut the mess with simply replacing an structure that has arrays defined in it; I would have to define three arrays for id, age, and salary for the employees if I wanted to use parallel arrays. Added to more typing if using parallel arrays, the possibility to get confused when using loops and doing calculations is higher. They are also harder to manage. each time if we want to add another filed, we would have to define another array. When using array of structures, only one array index calculation is needed at runtime.
The structure can also be defined in a header file, with the extension '.h'. Apparently, public structures should be declared in header but private structures can be defined in .c file, with a reference to the .h file if there's any connection between them. In this workshop, we could declare the Employee structure in a header file with a .h extension and declare emp structure in the .c file and then refer it to the .h file, because they are using the functions in the .h file; we connect these to file by adding a #include at the first of the .c file. The possible advantage to specifying a separate file for the structures is that in this way, we avoid them to be local to that specific file; if they are saved in a header file, they can be used later in other projects. 
